/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.ofcoder.klein.storage.facade;

import java.io.Serializable;
import java.util.List;
import java.util.concurrent.locks.ReentrantReadWriteLock;

import com.ofcoder.klein.common.Lifecycle;
import com.ofcoder.klein.spi.SPI;
import com.ofcoder.klein.storage.facade.config.StorageProp;

/**
 * Manage logs generated by the consensus system.
 *
 * @author 释慧利
 */
@SPI
public interface LogManager<P extends Serializable> extends Lifecycle<StorageProp> {

    /**
     * get log lock.
     *
     * @return ReentrantReadWriteLock
     */
    ReentrantReadWriteLock getLock();

    /**
     * Persisting the Instance.
     *
     * <p>
     * NOTICE: It needs to be called in a synchronous method.
     *
     * @param instance data
     */
    void updateInstance(Instance<P> instance);

    /**
     * Get the instance by id.
     *
     * @param id the index of instance
     * @return the instance with {@code id}
     */
    Instance<P> getInstance(long id);

    /**
     * Get instance without consensus.
     *
     * @return all instance for no confirm, state in (PREPARED, ACCEPTED)
     */
    List<Instance<P>> getInstanceNoConfirm();

    /**
     * load MetaData.
     *
     * @param defaultValue default MetaData
     * @return MetaData
     */
    MetaData loadMetaData(MetaData defaultValue);


    /**
     * load MemberConfig.
     *
     * @param defaultValue default MetaData
     * @return MetaData
     */
    ClusterConfig loadCluster(ClusterConfig defaultValue);

    /**
     * save snapshot.
     *
     * @param group sm group
     * @param snap  snapshot
     */
    void saveSnap(String group, Snap snap);

    /**
     * get last snapshot.
     *
     * @param group sm group
     * @return last snapshot
     */
    Snap getLastSnap(String group);


    /**
     * Meta data.
     *
     * @author 释慧利
     */
    interface MetaData extends Serializable {
    }


    /**
     * Meta data.
     *
     * @author 释慧利
     */
    interface ClusterConfig extends Serializable {
    }
}
