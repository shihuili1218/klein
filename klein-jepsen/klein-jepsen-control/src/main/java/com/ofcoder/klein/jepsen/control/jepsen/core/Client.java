/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.ofcoder.klein.jepsen.control.jepsen.core;

/**
 * client.
 */
public interface Client {
    /**
     * The client is a connection to the server through which operations are sent (such as reads, writes, and compare and sets (CASs)).
     *
     * @param args This argument should be changed according to user requirements. It should be the client instance that represents the pipe between user and server
     *             and is the result returned by {@code openClient(String)}
     */
    void teardownClient(Object args);

    /**
     * This method is used whenever the Jepsen daemon wants to send an operation to the cluster being tested.
     * The output of this method will be written to standard out in the terminal that the Jepsen test is being run.
     *
     * @param args       args
     * @param opName     operate key
     * @param inputValue This parameter can be different types, and is drawn from the {@code getValue(String)} method depending on the operation being performed.
     * @return null, 0, or false to indicate that the operation being performed has failed, otherwise the output value of the successful operation.
     */
    Object invokeClient(Object args, String opName, Object inputValue);

    /**
     * As the name suggests, the user should open a connection to the database cluster by constructing a client.
     *
     * @param node The IP address of the cluster which the user should connect to.
     * @return the client instance that is connected to the cluster, would be passed in as the first parameter for {@code invokeClient(Object, String, Object)} and {@code teardownClient(Object)}
     */
    Object openClient(String node);

    /**
     * Called by the Jepsen test to generate the name of the operation to be performed. Whether the operation generation is randomized or follows a specific pattern
     * is entirely up to the user.
     *
     * @return generate operator
     */
    String generateOp();

    /**
     * get value by key.
     *
     * @param opName key
     * @return The input value for the corresponding operation generated by the user
     */
    Object getValue(String opName);
}
